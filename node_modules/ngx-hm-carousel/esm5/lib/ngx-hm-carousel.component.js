/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, forwardRef, Inject, Input, NgZone, PLATFORM_ID, QueryList, Renderer2, TemplateRef, ViewChild, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, forkJoin, fromEvent, interval, merge, of, Subject, timer } from 'rxjs';
import { bufferCount, switchMap, takeUntil, tap, filter } from 'rxjs/operators';
import { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';
import { resizeObservable } from './rxjs.observable.resize';
// if the pane is paned .15, switch to the next pane.
/** @type {?} */
var PANBOUNDARY = 0.15;
var NgxHmCarouselComponent = /** @class */ (function () {
    function NgxHmCarouselComponent(platformId, _renderer, _zone, _cd) {
        this.platformId = platformId;
        this._renderer = _renderer;
        this._zone = _zone;
        this._cd = _cd;
        this.aniTime = 400;
        this.aniClass = 'transition';
        this.aniClassAuto = this.aniClass;
        // this default autoplay animation is same as aniClass
        this.align = 'center';
        this.notDrag = false;
        this.mourseEnable = false;
        this.delay = 8000;
        this.direction = 'right';
        this.scrollNum = 1;
        this.isDragMany = false;
        this.breakpoint = [];
        this.isFromAuto = true;
        this.isAutoNum = false;
        this.mouseOnContainer = false;
        this.alignDistance = 0;
        this.elmWidth = 0;
        this.firstElm_clone = [];
        this.LatestElm_clone = [];
        this.restart = new BehaviorSubject(null);
        this.stopEvent = new Subject();
        this.speedChange = new BehaviorSubject(5000);
        this.destroy$ = new Subject();
        this._porgressWidth = 0;
        this._currentIndex = 0;
        this._showNum = 1;
        this._autoplay = false;
        this._infinite = false;
        this._tmpInfinite = false;
        this._grabbing = false;
        this.panCount = 0;
        this._disableDrag = false;
        // this variable use for check the init value is write with ngModel,
        // when init first, not set with animation
        this.hasInitWriteValue = false;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(NgxHmCarouselComponent.prototype, "disableDrag", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disableDrag;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.rootElm) {
                if (this._disableDrag !== value) {
                    if (value) {
                        this.destoryHammer();
                    }
                    else {
                        this.hammer = this.bindHammer();
                    }
                }
            }
            this._disableDrag = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "infinite", {
        get: /**
         * @return {?}
         */
        function () { return this._infinite; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._infinite = value;
            if (this.LatestElm_clone.length) {
                this.LatestElm_clone.forEach(function (l) {
                    _this.addStyle(l, {
                        visibility: _this.runLoop ? 'visible' : 'hidden'
                    });
                });
            }
            if (this.firstElm_clone.length) {
                this.firstElm_clone.forEach(function (f) {
                    _this.addStyle(f, {
                        visibility: _this.runLoop ? 'visible' : 'hidden'
                    });
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "speed", {
        get: /**
         * @return {?}
         */
        function () { return this.speedChange.value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._zone.runOutsideAngular(function () {
                _this.speedChange.next(value);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "showNum", {
        get: /**
         * @return {?}
         */
        function () { return this._showNum; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === 'auto') {
                this.isAutoNum = true;
            }
            else {
                this._showNum = +value;
                if (this.rootElm) {
                    this.setViewWidth();
                    this.reSetVariable();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "currentIndex", {
        get: /**
         * @return {?}
         */
        function () { return this._currentIndex; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            // if now index if not equale to save index, do someting
            if (this.currentIndex !== value) {
                // if the value is not contain with the boundary not handler
                if (!this.runLoop && !(0 <= value && value <= this.itemElms.length - 1)) {
                    return;
                }
                this._currentIndex = value;
                if (this.elms) {
                    if (this.autoplay && !this.isFromAuto) {
                        this._zone.runOutsideAngular(function () {
                            _this.stopEvent.next();
                            _this.callRestart();
                        });
                    }
                    this.drawView(this.currentIndex, this.hasInitWriteValue);
                    if (this.isDragMany) {
                        this.hasInitWriteValue = true;
                    }
                }
                if (0 <= this.currentIndex && this.currentIndex <= this.itemElms.length - 1) {
                    this._zone.run(function () {
                        _this.onChange(_this.currentIndex);
                        _this._cd.detectChanges();
                    });
                }
            }
            this.isFromAuto = false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "autoplay", {
        get: /**
         * @return {?}
         */
        function () { return this._autoplay; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (isPlatformBrowser(this.platformId)) {
                if (this.elms) {
                    this.progressWidth = 0;
                    if (value) {
                        this._zone.runOutsideAngular(function () {
                            _this.doNextSub$ = _this.doNext.subscribe();
                        });
                    }
                    else {
                        if (this.doNextSub$) {
                            this.doNextSub$.unsubscribe();
                        }
                    }
                }
            }
            this._autoplay = value;
            // if set autoplay, then the infinite is true
            if (value) {
                this._tmpInfinite = this.infinite;
                this.infinite = true;
            }
            else {
                this.infinite = this._tmpInfinite;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "progressWidth", {
        get: /**
         * @return {?}
         */
        function () { return this._porgressWidth; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.progressElm !== undefined && this.autoplay) {
                this._porgressWidth = value;
                this._renderer.setStyle(((/** @type {?} */ (this.progressContainerElm.nativeElement))).children[0], 'width', this.progressWidth + "%");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "grabbing", {
        get: /**
         * @return {?}
         */
        function () { return this._grabbing; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (this._grabbing !== value) {
                // console.log(value);
                this._zone.run(function () {
                    if (value) {
                        _this._renderer.addClass(_this.containerElm, 'grabbing');
                    }
                    else {
                        _this.panCount = 0;
                        _this.callRestart();
                        _this._renderer.removeClass(_this.containerElm, 'grabbing');
                    }
                    _this._grabbing = value;
                    _this._cd.detectChanges();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "left", {
        set: /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setStyle(this.containerElm, 'left', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "maxRightIndex", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var addIndex = 0;
            switch (this.align) {
                case 'left':
                    addIndex = 0;
                    break;
                case 'center':
                    addIndex = (/** @type {?} */ (this.showNum)) - 1;
                    break;
                case 'right':
                    addIndex = (/** @type {?} */ (this.showNum)) - 1;
                    break;
            }
            return ((this.itemElms.length - 1) - (/** @type {?} */ (this.showNum)) + 1) + addIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "runLoop", {
        get: /**
         * @private
         * @return {?}
         */
        function () { return this.autoplay || this.infinite; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "lengthOne", {
        get: /**
         * @private
         * @return {?}
         */
        function () { return this.itemElms.length === 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "rootElmWidth", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return (isPlatformBrowser(this.platformId) ? this.rootElm.clientWidth : 100);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxHmCarouselComponent.prototype, "containerElmWidth", {
        set: /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setStyle(this.containerElm, 'width', value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.rootElm = this.parentChild.nativeElement;
        this.containerElm = (/** @type {?} */ (this.rootElm.children[0]));
        this.init();
        forkJoin(this.bindClick(), 
        // when item changed, remove old hammer binding, and reset width
        this.itemElms.changes.pipe(
        // detectChanges to change view dots
        tap(function () {
            if (_this.currentIndex > _this.itemElms.length - 1) {
                // i can't pass the changedetection check, only the way to using timeout. :(
                setTimeout(function () {
                    _this.currentIndex = _this.itemElms.length - 1;
                }, 0);
            }
            _this.destroy();
            _this.removeInfiniteElm();
            _this.init();
            _this.progressWidth = 0;
        }), tap(function () { return _this._cd.detectChanges(); })), resizeObservable(this.rootElm, function () { return _this.containerResize(); })).pipe(takeUntil(this.destroy$)).subscribe();
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        this.initVariable();
        this.setViewWidth(true);
        this.reSetVariable();
        if (!this.disableDrag) {
            this.hammer = this.bindHammer();
        }
        this.drawView(this.currentIndex, false);
        if (isPlatformBrowser(this.platformId)) {
            this.addInfiniteElm();
        }
    };
    /**
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
        this.destroy$.next();
        this.destroy$.unsubscribe();
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        this.destoryHammer();
        if (this.autoplay) {
            this.doNextSub$.unsubscribe();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.destoryHammer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hammer) {
            this.hammer.destroy();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value || value === 0) {
            this.currentIndex = value;
            this.hasInitWriteValue = true;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.addInfiniteElm = /**
     * @private
     * @return {?}
     */
    function () {
        for (var i = 1; i <= this.showNum; i++) {
            /** @type {?} */
            var first = (/** @type {?} */ (this.elms[(this.itemElms.length - i)].cloneNode(true)));
            this.addStyle(first, {
                position: 'absolute',
                transform: "translateX(-" + 100 * i + "%)",
                visibility: this.runLoop ? 'visible' : 'hidden'
            });
            this.firstElm_clone.push(first);
            /** @type {?} */
            var last = (/** @type {?} */ (this.elms[i - 1].cloneNode(true)));
            this.addStyle(last, {
                position: 'absolute',
                right: 0,
                top: 0,
                transform: "translateX(" + 100 * i + "%)",
                visibility: this.runLoop ? 'visible' : 'hidden'
            });
            this.LatestElm_clone.push(last);
            this._renderer.insertBefore(this.containerElm, first, this.containerElm.children[0]);
            this._renderer.appendChild(this.containerElm, last);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.removeInfiniteElm = /**
     * @private
     * @return {?}
     */
    function () {
        for (var i = this.firstElm_clone.length - 1; i >= 0; i--) {
            this._renderer.removeChild(this.containerElm, this.firstElm_clone[i]);
            this._renderer.removeChild(this.containerElm, this.LatestElm_clone[i]);
        }
        this.firstElm_clone = [];
        this.LatestElm_clone = [];
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.containerResize = /**
     * @private
     * @return {?}
     */
    function () {
        this.reSetVariable();
        this.setViewWidth();
        // 因為不能滑了，所以要回到第一個，以確保全部都有顯示
        if (this.align !== 'center' && this.showNum >= this.elms.length) {
            this.currentIndex = 0;
        }
        this.drawView(this.currentIndex, false);
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.initVariable = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            _this.elms = _this.itemElms.toArray().map(function (x) { return x.nativeElement; });
            /** @type {?} */
            var startEvent = _this.restart.asObservable();
            /** @type {?} */
            var stopEvent = _this.stopEvent.asObservable();
            if (_this.mourseEnable) {
                startEvent = merge(startEvent, fromEvent(_this.containerElm, 'mouseleave').pipe(
                // when leave, we should reverse grabbing state to set the mouseOn state,
                // because when the grabbing, the mask will on, and it will occur leave again
                filter(function () { return !_this.grabbing; }), tap(function () { return _this.mouseOnContainer = false; })));
                stopEvent = merge(stopEvent, fromEvent(_this.containerElm, 'mouseover').pipe(tap(function () { return _this.mouseOnContainer = true; })));
            }
            _this.doNext = startEvent.pipe(
            // not using debounceTime, it will stop mourseover event detect, will cause mourse-enable error
            // debounceTime(this.delay),
            switchMap(function () { return _this.speedChange; }), switchMap(function () {
                return timer(_this.delay).pipe(switchMap(function () { return _this.runProgress(20); }), tap(function () {
                    _this.isFromAuto = true;
                    // console.log('next');
                    if (_this.direction === 'left') {
                        _this.currentIndex -= _this.scrollNum;
                    }
                    else {
                        _this.currentIndex += _this.scrollNum;
                    }
                }), takeUntil(stopEvent.pipe(tap(function () { return _this.progressWidth = 0; }))));
            }));
            if (_this.autoplay) {
                _this.doNextSub$ = _this.doNext.subscribe();
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.reSetVariable = /**
     * @private
     * @return {?}
     */
    function () {
        switch (this.align) {
            case 'center':
                this.alignDistance = (this.rootElmWidth - this.elmWidth) / 2;
                break;
            case 'left':
                this.alignDistance = 0;
                break;
            case 'right':
                this.alignDistance = this.rootElmWidth - this.elmWidth;
                break;
        }
    };
    /**
     * @private
     * @param {?=} isInit
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.setViewWidth = /**
     * @private
     * @param {?=} isInit
     * @return {?}
     */
    function (isInit) {
        var _this = this;
        if (this.isAutoNum) {
            this._showNum = this.getAutoNum();
        }
        this._renderer.addClass(this.containerElm, 'grab');
        if (isInit) {
            // remain one elm height
            this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        }
        this.elmWidth = this.rootElmWidth / (/** @type {?} */ (this.showNum));
        this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');
        this.containerElmWidth = this.elmWidth * this.elms.length;
        this._renderer.setStyle(this.containerElm, 'position', 'relative');
        this.elms.forEach(function (elm) {
            _this.setStyle(elm, 'width', _this.elmWidth);
        });
        if (this.firstElm_clone.length) {
            for (var i = this.firstElm_clone.length - 1; i >= 0; i--) {
                this.setStyle(this.firstElm_clone[i], 'width', this.elmWidth);
                this.setStyle(this.LatestElm_clone[i], 'width', this.elmWidth);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.bindHammer = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!isPlatformBrowser(this.platformId)) {
            return null;
        }
        return this._zone.runOutsideAngular(function () {
            /** @type {?} */
            var hm = new Hammer(_this.containerElm);
            hm.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });
            hm.on('panleft panright panend pancancel', function (e) {
                // console.log(e.type);
                if (_this.lengthOne) {
                    return;
                }
                _this.removeContainerTransition();
                if (_this.autoplay) {
                    _this._zone.runOutsideAngular(function () { _this.stopEvent.next(); });
                }
                switch (e.type) {
                    case 'panleft':
                    case 'panright':
                        _this.panCount++;
                        // only when panmove more than two times, set move
                        if (_this.panCount < 2) {
                            return;
                        }
                        _this.grabbing = true;
                        // When show-num is bigger than length, stop hammer
                        if (_this.align !== 'center' && _this.showNum >= _this.elms.length) {
                            _this.grabbing = false;
                            _this.hammer.stop(true);
                            return;
                        }
                        // Slow down at the first and last pane.
                        if (!_this.runLoop && _this.outOfBound(e.type)) {
                            e.deltaX *= 0.2;
                        }
                        if (!_this.notDrag) {
                            _this.left = -_this.currentIndex * _this.elmWidth + _this.alignDistance + e.deltaX;
                        }
                        // // if not dragmany, when bigger than half
                        if (!_this.isDragMany) {
                            if (Math.abs(e.deltaX) > _this.elmWidth * 0.5) {
                                if (e.deltaX > 0) {
                                    _this.currentIndex -= _this.scrollNum;
                                }
                                else {
                                    _this.currentIndex += _this.scrollNum;
                                }
                                _this.grabbing = false;
                                _this.hammer.stop(true);
                                return;
                            }
                        }
                        break;
                    case 'pancancel':
                        _this.grabbing = false;
                        _this.drawView(_this.currentIndex);
                        break;
                    case 'panend':
                        _this.grabbing = false;
                        if (Math.abs(e.deltaX) > _this.elmWidth * PANBOUNDARY) {
                            /** @type {?} */
                            var moveNum = _this.isDragMany ?
                                Math.ceil(Math.abs(e.deltaX) / _this.elmWidth) : _this.scrollNum;
                            /** @type {?} */
                            var prevIndex = _this.currentIndex - moveNum;
                            /** @type {?} */
                            var nextIndex = _this.currentIndex + moveNum;
                            // 如果不是無限循環，不能大於或小於
                            if (e.deltaX > 0) {
                                if (!_this.runLoop && prevIndex < 0) {
                                    prevIndex = 0;
                                    _this.drawView(0);
                                }
                                _this.currentIndex = prevIndex;
                            }
                            else {
                                if (!_this.runLoop && nextIndex > _this.maxRightIndex) {
                                    nextIndex = _this.maxRightIndex;
                                    _this.drawView(nextIndex);
                                }
                                _this.currentIndex = nextIndex;
                            }
                            break;
                        }
                        _this.drawView(_this.currentIndex);
                        break;
                }
            });
            return hm;
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.bindClick = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.btnNext && this.btnPrev) {
            return forkJoin(fromEvent(this.btnNext.nativeElement, 'click').pipe(tap(function () { return _this.currentIndex++; })), fromEvent(this.btnPrev.nativeElement, 'click').pipe(tap(function () { return _this.currentIndex--; })));
        }
        return of(null);
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.callRestart = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // if that is autoplay
        // if that mouse is not on container( only mouse-enable is true, the state maybe true)
        // if now is grabbing, skip this restart, using grabbing change restart
        if (this.autoplay && !this.mouseOnContainer && !this.grabbing) {
            this._zone.runOutsideAngular(function () {
                _this.restart.next(null);
            });
        }
    };
    /**
     * @private
     * @param {?} index
     * @param {?=} isAnimation
     * @param {?=} isFromAuto
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.drawView = /**
     * @private
     * @param {?} index
     * @param {?=} isAnimation
     * @param {?=} isFromAuto
     * @return {?}
     */
    function (index, isAnimation, isFromAuto) {
        if (isAnimation === void 0) { isAnimation = true; }
        if (isFromAuto === void 0) { isFromAuto = this.isFromAuto; }
        // move element only on length is more than 1
        if (this.elms.length > 1) {
            this.removeContainerTransition();
            this.left = -((index * this.elmWidth) - this.alignDistance);
            if (isAnimation) {
                if (isFromAuto) {
                    this._renderer.addClass(this.containerElm, this.aniClassAuto);
                }
                else {
                    this._renderer.addClass(this.containerElm, this.aniClass);
                }
                // if infinite move to next index with timeout
                this.infiniteHandler(index);
            }
        }
        else {
            this.left = this.alignDistance;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.removeContainerTransition = /**
     * @private
     * @return {?}
     */
    function () {
        this._renderer.removeClass(this.containerElm, this.aniClass);
        this._renderer.removeClass(this.containerElm, this.aniClassAuto);
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.infiniteHandler = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        if (this.runLoop) {
            /** @type {?} */
            var state_1 = 0;
            state_1 = (index < 0) ? -1 : state_1;
            state_1 = (index > (this.itemElms.length - 1)) ? 1 : state_1;
            if (state_1 !== 0) {
                switch (state_1) {
                    case -1:
                        this._currentIndex = (this.itemElms.length - 1);
                        break;
                    case 1:
                        this._currentIndex = 0;
                        break;
                }
                /** @type {?} */
                var isFromAuto_1 = this.isFromAuto;
                setTimeout(function () {
                    // when loop, cancel transition, and jump to boundary, when animation end
                    _this.removeContainerTransition();
                    switch (state_1) {
                        case -1:
                            /** @type {?} */
                            var distance = ((_this.itemElms.length - 1) * _this.elmWidth) - _this.alignDistance;
                            _this.left = -distance;
                            break;
                        case 1:
                            _this.left = 0 + _this.alignDistance;
                            break;
                    }
                    // if it is any loop carousel, the next event need wait the timeout complete
                    if (_this.aniTime === _this.speed) {
                        setTimeout(function () {
                            _this.drawView(_this.currentIndex, _this.hasInitWriteValue, isFromAuto_1);
                        }, 50);
                    }
                }, this.aniTime);
            }
        }
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.outOfBound = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'panleft':
                return this.currentIndex >= this.maxRightIndex;
            case 'panright':
                return this.currentIndex <= 0;
        }
    };
    /**
     * @private
     * @param {?} betweenTime
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.runProgress = /**
     * @private
     * @param {?} betweenTime
     * @return {?}
     */
    function (betweenTime) {
        var _this = this;
        return this._zone.runOutsideAngular(function () {
            /** @type {?} */
            var howTimes = _this.speed / betweenTime;
            /** @type {?} */
            var everyIncrease = 100 / _this.speed * betweenTime;
            return interval(betweenTime).pipe(tap(function (t) {
                _this.progressWidth = (t % howTimes) * everyIncrease;
            }), bufferCount(Math.round(howTimes), 0));
        });
    };
    /**
     * @private
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.getAutoNum = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var curr_width = this.rootElmWidth;
        // check user has had set breakpoint
        if (this.breakpoint.length > 0) {
            // get the last bigget point
            /** @type {?} */
            var now = this.breakpoint.find(function (b) {
                return b.width >= curr_width;
            });
            // if find value, it is current width
            if (now) {
                return now.number;
            }
            return this.breakpoint[this.breakpoint.length - 1].number;
        }
        // system init show number
        /** @type {?} */
        var initNum = 3;
        // 610
        if (curr_width > 300) {
            return Math.floor(initNum + (curr_width / 200));
        }
        return initNum;
    };
    /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.addStyle = /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @return {?}
     */
    function (elm, style) {
        var _this = this;
        if (style) {
            Object.keys(style).forEach(function (key) {
                /** @type {?} */
                var value = style[key];
                _this._renderer.setStyle(elm, key, value);
            });
        }
    };
    /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    NgxHmCarouselComponent.prototype.setStyle = /**
     * @private
     * @param {?} elm
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    function (elm, style, value) {
        if (isPlatformBrowser(this.platformId)) {
            this._renderer.setStyle(elm, style, value + "px");
        }
        else {
            this._renderer.setStyle(elm, style, value + "%");
        }
    };
    NgxHmCarouselComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-hm-carousel',
                    template: "<div #parentChild class=\"carousel\">\n  <ng-content select=\"[ngx-hm-carousel-container]\"></ng-content>\n  <!-- left -->\n  <div #prev *ngIf=\"contentPrev\"\n    class=\"direction left\">\n    <ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n  </div>\n  <!--  right -->\n  <div #next *ngIf=\"contentNext\"\n    class=\"direction right\">\n    <ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n  </div>\n  <!-- indicators -->\n  <ul class=\"indicators\" *ngIf=\"dotElm\">\n    <li\n      *ngFor=\"let dot of itemElms; let i = index;\"\n      (click)=\"currentIndex = i\">\n      <ng-container\n        *ngTemplateOutlet=\"dotElm, context: {\n          $implicit: {\n            index : i,\n            currentIndex : currentIndex\n          }\n        }\">\n      </ng-container>\n    </li>\n  </ul>\n  <!-- progress -->\n  <div *ngIf=\"progressElm && autoplay\" #progress>\n    <ng-container\n      *ngTemplateOutlet=\"progressElm\">\n    </ng-container>\n  </div>\n\n  <div class=\"mask\" *ngIf=\"grabbing\"></div>\n</div>\n",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return NgxHmCarouselComponent; }),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:block;height:100%}.ngx-hm-carousel-display-npwrap{display:flex!important;flex-wrap:nowrap!important;flex-direction:row!important;overflow:hidden!important}.carousel{overflow:hidden;position:relative;width:100%;height:100%}.carousel ul.indicators{list-style:none;bottom:1rem;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.carousel ul.indicators li{cursor:pointer;display:inline-block;position:relative;padding:.5rem}.carousel .direction{position:absolute;height:100%;cursor:pointer;display:flex;align-items:center;justify-content:center;top:0}.carousel .direction.left{left:0}.carousel .direction.right{position:absolute;right:0}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{position:absolute;left:0;top:0;right:0;bottom:0}"]
                }] }
    ];
    /** @nocollapse */
    NgxHmCarouselComponent.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Renderer2 },
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    NgxHmCarouselComponent.propDecorators = {
        parentChild: [{ type: ViewChild, args: ['parentChild',] }],
        btnPrev: [{ type: ViewChild, args: ['prev',] }],
        btnNext: [{ type: ViewChild, args: ['next',] }],
        progressContainerElm: [{ type: ViewChild, args: ['progress',] }],
        itemElms: [{ type: ContentChildren, args: [NgxHmCarouselItemDirective, { read: ElementRef },] }],
        contentPrev: [{ type: ContentChild, args: ['carouselPrev',] }],
        contentNext: [{ type: ContentChild, args: ['carouselNext',] }],
        dotElm: [{ type: ContentChild, args: ['carouselDot',] }],
        progressElm: [{ type: ContentChild, args: ['carouselProgress',] }],
        aniTime: [{ type: Input }],
        aniClass: [{ type: Input }],
        aniClassAuto: [{ type: Input }],
        align: [{ type: Input }],
        notDrag: [{ type: Input, args: ['not-follow-pan',] }],
        mourseEnable: [{ type: Input, args: ['mourse-enable',] }],
        delay: [{ type: Input, args: ['between-delay',] }],
        direction: [{ type: Input, args: ['autoplay-direction',] }],
        scrollNum: [{ type: Input, args: ['scroll-num',] }],
        isDragMany: [{ type: Input, args: ['drag-many',] }],
        disableDrag: [{ type: Input, args: ['disable-drag',] }],
        infinite: [{ type: Input, args: ['infinite',] }],
        speed: [{ type: Input, args: ['autoplay-speed',] }],
        showNum: [{ type: Input, args: ['show-num',] }],
        autoplay: [{ type: Input, args: ['autoplay',] }],
        breakpoint: [{ type: Input }]
    };
    return NgxHmCarouselComponent;
}());
export { NgxHmCarouselComponent };
if (false) {
    /** @type {?} */
    NgxHmCarouselComponent.prototype.parentChild;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.btnPrev;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.btnNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.progressContainerElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.itemElms;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentPrev;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.contentNext;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.dotElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.progressElm;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniTime;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniClass;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.aniClassAuto;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.align;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.notDrag;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.mourseEnable;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.delay;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.direction;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.scrollNum;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.isDragMany;
    /** @type {?} */
    NgxHmCarouselComponent.prototype.breakpoint;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.isFromAuto;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.isAutoNum;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.mouseOnContainer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.alignDistance;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.elmWidth;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.rootElm;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.containerElm;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.elms;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.firstElm_clone;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.LatestElm_clone;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.hammer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.restart;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.stopEvent;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.doNext;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.doNextSub$;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.speedChange;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._porgressWidth;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._currentIndex;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._showNum;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._autoplay;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._infinite;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._tmpInfinite;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._grabbing;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.panCount;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._disableDrag;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.hasInitWriteValue;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    NgxHmCarouselComponent.prototype._cd;
}
//# sourceMappingURL=data:application/json;base64,