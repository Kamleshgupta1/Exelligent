{"version":3,"sources":["ng://ngx-hm-carousel/lib/ngx-hm-carousel-dynamic.directive.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel-item.directive.ts","ng://ngx-hm-carousel/lib/rxjs.observable.resize.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel.component.ts","ng://ngx-hm-carousel/lib/ngx-hm-carousel.module.ts"],"names":["NgxHmCarouselDynamicDirective","_view","_template","this","compelete","clear","Object","defineProperty","prototype","value","nextI","prevI","index","length","createEmbeddedView","ngOnInit","Directive","args","selector","ViewContainerRef","TemplateRef","Input","NgxHmCarouselItemDirective","resizeObservable","elm","cb","time","elmObserve$","Observable","create","observer","ResizeObserver","entries","obs","next","observe","pipe","debounceTime","tap","finalize","unobserve","disconnect","NgxHmCarouselComponent","platformId","_renderer","_zone","_cd","aniTime","aniClass","aniClassAuto","align","notDrag","mourseEnable","delay","direction","scrollNum","isDragMany","breakpoint","isFromAuto","isAutoNum","mouseOnContainer","alignDistance","elmWidth","firstElm_clone","LatestElm_clone","restart","BehaviorSubject","stopEvent","Subject","speedChange","destroy$","_porgressWidth","_currentIndex","_showNum","_autoplay","_infinite","_tmpInfinite","_grabbing","panCount","_disableDrag","hasInitWriteValue","onChange","_","onTouched","rootElm","destoryHammer","hammer","bindHammer","_this","forEach","l","addStyle","visibility","runLoop","f","runOutsideAngular","setViewWidth","reSetVariable","currentIndex","itemElms","elms","autoplay","callRestart","drawView","run","detectChanges","isPlatformBrowser","progressWidth","doNextSub$","doNext","subscribe","unsubscribe","infinite","progressElm","undefined","setStyle","progressContainerElm","children","addClass","containerElm","removeClass","addIndex","clientWidth","ngAfterViewInit","parentChild","nativeElement","init","forkJoin","bindClick","changes","setTimeout","destroy","removeInfiniteElm","containerResize","takeUntil","initVariable","disableDrag","addInfiniteElm","ngOnDestroy","writeValue","registerOnChange","fn","registerOnTouched","i","showNum","first","cloneNode","position","transform","push","last","right","top","insertBefore","appendChild","removeChild","toArray","map","x","startEvent","asObservable","merge","fromEvent","filter","grabbing","switchMap","timer","runProgress","rootElmWidth","isInit","getAutoNum","containerElmWidth","hm","Hammer","get","set","DIRECTION_HORIZONTAL","on","e","lengthOne","removeContainerTransition","type","stop","outOfBound","deltaX","left","Math","abs","moveNum","ceil","prevIndex","nextIndex","maxRightIndex","btnNext","btnPrev","of","isAnimation","infiniteHandler","state_1","isFromAuto_1","distance","speed","betweenTime","howTimes","everyIncrease","interval","t","bufferCount","round","curr_width","now","find","b","width","number","floor","style","keys","key","Component","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","changeDetection","ChangeDetectionStrategy","OnPush","decorators","Inject","PLATFORM_ID","Renderer2","NgZone","ChangeDetectorRef","ViewChild","ContentChildren","read","ElementRef","ContentChild","NgxHmCarouselModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngxHmCarouselDynamic]'\n})\nexport class NgxHmCarouselDynamicDirective implements OnInit {\n\n  @Input('ngxHmCarouselDynamic') index: number;\n  @Input('ngxHmCarouselDynamicLength') length: number;\n  @Input('ngxHmCarouselDynamicIndex')\n\n  set currentI(value: number) {\n    if (!this.compelete) {\n\n      const nextI = value + 1;\n      const prevI = value - 1;\n\n      if (\n        this.index === 0 ||\n        this.index === this.length - 1 ||\n        this.index === nextI ||\n        this.index === prevI ||\n        this.index === value) {\n        this._view.createEmbeddedView(this._template);\n        this.compelete = true;\n      }\n    }\n  }\n\n  private compelete = false;\n  constructor(\n    private _view: ViewContainerRef,\n    private _template: TemplateRef<any>) {\n    this._view.clear();\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[ngx-hm-carousel-item]'\n})\nexport class NgxHmCarouselItemDirective {\n\n  constructor() { }\n\n}\n","import ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Subscriber } from 'rxjs';\nimport { debounceTime, tap, finalize } from 'rxjs/operators';\n\n/**\n * An observable creator for element resize.\n * @param elm the watch element.\n * @param cb when resize complete, call back function.\n * @param time resize emit time, default is 200\n */\nexport function resizeObservable(elm: HTMLElement, cb: () => void, time = 200): Observable<any> {\n  let elmObserve$: ResizeObserver;\n  return Observable.create((observer: Subscriber<any>) => {\n    elmObserve$ = new ResizeObserver((entries, obs) => {\n      observer.next(elmObserve$);\n    });\n    elmObserve$.observe(elm);\n  }).pipe(\n    debounceTime(time),\n    tap(() => {\n      cb();\n    }),\n    finalize(() => {\n      elmObserve$.unobserve(elm);\n      elmObserve$.disconnect();\n    })\n  );\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n  QueryList,\n  Renderer2,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject, forkJoin, fromEvent, interval, merge, Observable, of, Subject, Subscription, timer } from 'rxjs';\nimport { bufferCount, switchMap, takeUntil, tap, filter, take } from 'rxjs/operators';\n\nimport { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';\nimport { resizeObservable } from './rxjs.observable.resize';\nimport { NgxHmCarouselBreakPointUp } from './ngx-hm-carousel.model';\n\n// if the pane is paned .15, switch to the next pane.\nconst PANBOUNDARY = 0.15;\n\n@Component({\n  selector: 'ngx-hm-carousel',\n  templateUrl: './ngx-hm-carousel.component.html',\n  styleUrls: ['./ngx-hm-carousel.component.scss'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgxHmCarouselComponent),\n    multi: true\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxHmCarouselComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\n  @ViewChild('parentChild') parentChild: ElementRef;\n  @ViewChild('prev') btnPrev: ElementRef;\n  @ViewChild('next') btnNext: ElementRef;\n  @ViewChild('progress') progressContainerElm: ElementRef;\n  // get all item elms\n  @ContentChildren(NgxHmCarouselItemDirective, { read: ElementRef }) itemElms: QueryList<ElementRef>;\n  @ContentChild('carouselPrev') contentPrev: TemplateRef<any>;\n  @ContentChild('carouselNext') contentNext: TemplateRef<any>;\n  @ContentChild('carouselDot') dotElm: TemplateRef<any>;\n  @ContentChild('carouselProgress') progressElm: TemplateRef<any>;\n\n  @Input() aniTime = 400;\n  @Input() aniClass = 'transition';\n  @Input() aniClassAuto = this.aniClass;\n\n  // this default autoplay animation is same as aniClass\n  @Input() align: 'left' | 'center' | 'right' = 'center';\n  @Input('not-follow-pan') notDrag = false;\n  @Input('mourse-enable') mourseEnable = false;\n  @Input('between-delay') delay = 8000;\n  @Input('autoplay-direction') direction: 'left' | 'right' = 'right';\n  @Input('scroll-num') scrollNum = 1;\n  @Input('drag-many') isDragMany = false;\n  @Input('disable-drag')\n  get disableDrag() {\n    return this._disableDrag;\n  }\n  set disableDrag(value) {\n    if (this.rootElm) {\n      if (this._disableDrag !== value) {\n        if (value) {\n          this.destoryHammer();\n        } else {\n          this.hammer = this.bindHammer();\n        }\n      }\n    }\n    this._disableDrag = value;\n  }\n\n  @Input('infinite')\n  get infinite() { return this._infinite; }\n  set infinite(value) {\n    this._infinite = value;\n    if (this.LatestElm_clone.length) {\n      this.LatestElm_clone.forEach(l => {\n        this.addStyle(l, {\n          visibility: this.runLoop ? 'visible' : 'hidden'\n        });\n      });\n    }\n    if (this.firstElm_clone.length) {\n      this.firstElm_clone.forEach(f => {\n        this.addStyle(f, {\n          visibility: this.runLoop ? 'visible' : 'hidden'\n        });\n      });\n    }\n  }\n\n  @Input('autoplay-speed')\n  get speed() { return this.speedChange.value; }\n  set speed(value) {\n    this._zone.runOutsideAngular(() => {\n      this.speedChange.next(value);\n    });\n  }\n\n  @Input('show-num')\n  get showNum() { return this._showNum; }\n  set showNum(value: number | 'auto') {\n    if (value === 'auto') {\n      this.isAutoNum = true;\n    } else {\n      this._showNum = +value;\n      if (this.rootElm) {\n        this.setViewWidth();\n        this.reSetVariable();\n      }\n    }\n  }\n\n  get currentIndex() { return this._currentIndex; }\n  set currentIndex(value) {\n    // if now index if not equale to save index, do someting\n    if (this.currentIndex !== value) {\n\n      // if the value is not contain with the boundary not handler\n      if (!this.runLoop && !(0 <= value && value <= this.itemElms.length - 1)) {\n        return;\n      }\n      this._currentIndex = value;\n      if (this.elms) {\n        if (this.autoplay && !this.isFromAuto) {\n\n          this._zone.runOutsideAngular(() => {\n            this.stopEvent.next();\n            this.callRestart();\n          });\n        }\n        this.drawView(this.currentIndex, this.hasInitWriteValue);\n        if (this.isDragMany) {\n          this.hasInitWriteValue = true;\n        }\n      }\n      if (0 <= this.currentIndex && this.currentIndex <= this.itemElms.length - 1) {\n        this._zone.run(() => {\n          this.onChange(this.currentIndex);\n          this._cd.detectChanges();\n        });\n      }\n    }\n    this.isFromAuto = false;\n  }\n\n  @Input('autoplay')\n  get autoplay() { return this._autoplay; }\n  set autoplay(value) {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.elms) {\n        this.progressWidth = 0;\n        if (value) {\n          this._zone.runOutsideAngular(() => {\n            this.doNextSub$ = this.doNext.subscribe();\n          });\n        } else {\n          if (this.doNextSub$) { this.doNextSub$.unsubscribe(); }\n        }\n      }\n    }\n    this._autoplay = value;\n    // if set autoplay, then the infinite is true\n    if (value) {\n      this._tmpInfinite = this.infinite;\n      this.infinite = true;\n    } else {\n      this.infinite = this._tmpInfinite;\n    }\n  }\n\n  get progressWidth() { return this._porgressWidth; }\n  set progressWidth(value) {\n    if (this.progressElm !== undefined && this.autoplay) {\n      this._porgressWidth = value;\n      this._renderer.setStyle((<HTMLElement>this.progressContainerElm.nativeElement).children[0], 'width', `${this.progressWidth}%`);\n    }\n  }\n\n  @Input() breakpoint: NgxHmCarouselBreakPointUp[] = [];\n\n  get grabbing() { return this._grabbing; }\n  set grabbing(value: boolean) {\n    if (this._grabbing !== value) {\n      // console.log(value);\n      this._zone.run(() => {\n        if (value) {\n          this._renderer.addClass(this.containerElm, 'grabbing');\n        } else {\n          this.panCount = 0;\n          this.callRestart();\n          this._renderer.removeClass(this.containerElm, 'grabbing');\n        }\n        this._grabbing = value;\n        this._cd.detectChanges();\n      });\n    }\n  }\n\n  private set left(value: number) {\n    this.setStyle(this.containerElm, 'left', value);\n  }\n\n  private get maxRightIndex() {\n    let addIndex = 0;\n    switch (this.align) {\n      case 'left':\n        addIndex = 0;\n        break;\n      case 'center':\n        addIndex = <number>this.showNum - 1;\n        break;\n      case 'right':\n        addIndex = <number>this.showNum - 1;\n        break;\n    }\n    return ((this.itemElms.length - 1) - <number>this.showNum + 1) + addIndex;\n  }\n\n  private get runLoop() { return this.autoplay || this.infinite; }\n  private get lengthOne() { return this.itemElms.length === 1; }\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private _renderer: Renderer2,\n    private _zone: NgZone,\n    private _cd: ChangeDetectorRef\n  ) { }\n\n  private isFromAuto = true;\n  private isAutoNum = false;\n  private mouseOnContainer = false;\n  private alignDistance = 0;\n  private elmWidth = 0;\n\n  private rootElm: HTMLElement;\n  private containerElm: HTMLElement;\n\n  private elms: Array<HTMLElement>;\n  private firstElm_clone: HTMLElement[] = [];\n  private LatestElm_clone: HTMLElement[] = [];\n  private hammer: HammerManager;\n\n  private restart = new BehaviorSubject<any>(null);\n  private stopEvent = new Subject<any>();\n  private doNext: Observable<any>;\n  private doNextSub$: Subscription;\n  private speedChange = new BehaviorSubject(5000);\n  private destroy$ = new Subject<any>();\n\n  private _porgressWidth = 0;\n  private _currentIndex = 0;\n  private _showNum = 1;\n  private _autoplay = false;\n  private _infinite = false;\n  private _tmpInfinite = false;\n  private _grabbing = false;\n\n  private panCount = 0;\n\n  private _disableDrag = false;\n\n  // this variable use for check the init value is write with ngModel,\n  // when init first, not set with animation\n  private hasInitWriteValue = false;\n\n  private get rootElmWidth() {\n    return (isPlatformBrowser(this.platformId) ? this.rootElm.clientWidth : 100);\n  }\n\n  private set containerElmWidth(value) {\n    this.setStyle(this.containerElm, 'width', value);\n  }\n\n  ngAfterViewInit() {\n    this.rootElm = this.parentChild.nativeElement;\n    this.containerElm = this.rootElm.children[0] as HTMLElement;\n\n    this.init();\n\n    forkJoin(\n      this.bindClick(),\n      // when item changed, remove old hammer binding, and reset width\n      this.itemElms.changes.pipe(\n        // detectChanges to change view dots\n        tap(() => {\n          if (this.currentIndex > this.itemElms.length - 1) {\n            // i can't pass the changedetection check, only the way to using timeout. :(\n            setTimeout(() => {\n              this.currentIndex = this.itemElms.length - 1;\n            }, 0);\n          }\n          this.destroy();\n          this.removeInfiniteElm();\n          this.init();\n          this.progressWidth = 0;\n        }),\n        tap(() => this._cd.detectChanges()),\n      ),\n      resizeObservable(\n        this.rootElm, () => this.containerResize()\n      )\n    ).pipe(\n      takeUntil(this.destroy$),\n    ).subscribe();\n  }\n\n  private init() {\n    this.initVariable();\n    this.setViewWidth(true);\n    this.reSetVariable();\n    if (!this.disableDrag) {\n      this.hammer = this.bindHammer();\n    }\n    this.drawView(this.currentIndex, false);\n    if (isPlatformBrowser(this.platformId)) {\n      this.addInfiniteElm();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n    this.destroy$.next();\n    this.destroy$.unsubscribe();\n  }\n\n  private destroy() {\n    this.destoryHammer();\n\n    if (this.autoplay) { this.doNextSub$.unsubscribe(); }\n  }\n\n  private destoryHammer() {\n    if (this.hammer) {\n      this.hammer.destroy();\n    }\n  }\n\n  writeValue(value: any) {\n    if (value || value === 0) {\n      this.currentIndex = value;\n      this.hasInitWriteValue = true;\n    }\n  }\n  registerOnChange(fn: (value: any) => any) { this.onChange = fn; }\n  registerOnTouched(fn: () => any) { this.onTouched = fn; }\n  private onChange = (_: any) => { };\n  private onTouched = () => { };\n\n  private addInfiniteElm() {\n    for (let i = 1; i <= this.showNum; i++) {\n\n      const first = this.elms[(this.itemElms.length - i)].cloneNode(true) as HTMLElement;\n      this.addStyle(first, {\n        position: 'absolute',\n        transform: `translateX(-${100 * i}%)`,\n        visibility: this.runLoop ? 'visible' : 'hidden'\n      });\n\n      this.firstElm_clone.push(first);\n\n\n      const last = this.elms[i - 1].cloneNode(true) as HTMLElement;\n      this.addStyle(last, {\n        position: 'absolute',\n        right: 0,\n        top: 0,\n        transform: `translateX(${100 * i}%)`,\n        visibility: this.runLoop ? 'visible' : 'hidden'\n      });\n\n      this.LatestElm_clone.push(last);\n\n      this._renderer.insertBefore(this.containerElm, first, this.containerElm.children[0]);\n      this._renderer.appendChild(this.containerElm, last);\n    }\n\n\n  }\n\n  private removeInfiniteElm() {\n    for (let i = this.firstElm_clone.length - 1; i >= 0; i--) {\n      this._renderer.removeChild(this.containerElm, this.firstElm_clone[i]);\n      this._renderer.removeChild(this.containerElm, this.LatestElm_clone[i]);\n    }\n    this.firstElm_clone = [];\n    this.LatestElm_clone = [];\n  }\n\n  private containerResize() {\n    this.reSetVariable();\n    this.setViewWidth();\n\n    // å çºä¸è½æ»äºï¼æä»¥è¦åå°ç¬¬ä¸åï¼ä»¥ç¢ºä¿å¨é¨é½æé¡¯ç¤º\n    if (this.align !== 'center' && this.showNum >= this.elms.length) {\n      this.currentIndex = 0;\n    }\n    this.drawView(this.currentIndex, false);\n  }\n\n  private initVariable() {\n    this._zone.runOutsideAngular(() => {\n\n      this.elms = this.itemElms.toArray().map(x => x.nativeElement);\n\n      let startEvent = this.restart.asObservable();\n      let stopEvent = this.stopEvent.asObservable();\n      if (this.mourseEnable) {\n        startEvent = merge(\n          startEvent,\n          fromEvent(this.containerElm, 'mouseleave').pipe(\n            // when leave, we should reverse grabbing state to set the mouseOn state,\n            // because when the grabbing, the mask will on, and it will occur leave again\n            filter(() => !this.grabbing),\n            tap(() => this.mouseOnContainer = false)\n          )\n        );\n        stopEvent = merge(\n          stopEvent,\n          fromEvent(this.containerElm, 'mouseover').pipe(\n            tap(() => this.mouseOnContainer = true)\n          )\n        );\n      }\n\n      this.doNext = startEvent.pipe(\n        // not using debounceTime, it will stop mourseover event detect, will cause mourse-enable error\n        // debounceTime(this.delay),\n        switchMap(() => this.speedChange),\n        switchMap(() =>\n          timer(this.delay).pipe(\n            switchMap(() => this.runProgress(20)),\n            tap(() => {\n              this.isFromAuto = true;\n              // console.log('next');\n              if (this.direction === 'left') {\n                this.currentIndex -= this.scrollNum;\n              } else {\n                this.currentIndex += this.scrollNum;\n              }\n            }),\n            takeUntil(stopEvent.pipe(\n              tap(() => this.progressWidth = 0)\n            ))\n          )\n        ));\n\n      if (this.autoplay) {\n        this.doNextSub$ = this.doNext.subscribe();\n      }\n    });\n  }\n\n  private reSetVariable() {\n    switch (this.align) {\n      case 'center':\n        this.alignDistance = (this.rootElmWidth - this.elmWidth) / 2;\n        break;\n      case 'left':\n        this.alignDistance = 0;\n        break;\n      case 'right':\n        this.alignDistance = this.rootElmWidth - this.elmWidth;\n        break;\n    }\n  }\n\n  private setViewWidth(isInit?: boolean) {\n    if (this.isAutoNum) {\n      this._showNum = this.getAutoNum();\n    }\n    this._renderer.addClass(this.containerElm, 'grab');\n    if (isInit) {\n      // remain one elm height\n      this._renderer.addClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');\n    }\n    this.elmWidth = this.rootElmWidth / <number>this.showNum;\n\n    this._renderer.removeClass(this.containerElm, 'ngx-hm-carousel-display-npwrap');\n\n    this.containerElmWidth = this.elmWidth * this.elms.length;\n\n    this._renderer.setStyle(this.containerElm, 'position', 'relative');\n\n    this.elms.forEach((elm: HTMLElement) => {\n      this.setStyle(elm, 'width', this.elmWidth);\n    });\n\n    if (this.firstElm_clone.length) {\n      for (let i = this.firstElm_clone.length - 1; i >= 0; i--) {\n        this.setStyle(this.firstElm_clone[i], 'width', this.elmWidth);\n        this.setStyle(this.LatestElm_clone[i], 'width', this.elmWidth);\n      }\n    }\n  }\n\n  private bindHammer() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return null;\n    }\n    return this._zone.runOutsideAngular(() => {\n\n      const hm = new Hammer(this.containerElm);\n      hm.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });\n\n      hm.on('panleft panright panend pancancel', (e: HammerInput) => {\n        // console.log(e.type);\n\n        if (this.lengthOne) {\n          return;\n        }\n\n        this.removeContainerTransition();\n\n        if (this.autoplay) {\n          this._zone.runOutsideAngular(() => { this.stopEvent.next(); });\n        }\n\n        switch (e.type) {\n          case 'panleft':\n          case 'panright':\n            this.panCount++;\n            // only when panmove more than two times, set move\n            if (this.panCount < 2) {\n              return;\n            }\n\n            this.grabbing = true;\n            // When show-num is bigger than length, stop hammer\n            if (this.align !== 'center' && this.showNum >= this.elms.length) {\n              this.grabbing = false;\n              this.hammer.stop(true);\n              return;\n            }\n            // Slow down at the first and last pane.\n            if (!this.runLoop && this.outOfBound(e.type)) {\n              e.deltaX *= 0.2;\n            }\n\n            if (!this.notDrag) {\n              this.left = -this.currentIndex * this.elmWidth + this.alignDistance + e.deltaX;\n            }\n\n            // // if not dragmany, when bigger than half\n            if (!this.isDragMany) {\n              if (Math.abs(e.deltaX) > this.elmWidth * 0.5) {\n                if (e.deltaX > 0) {\n                  this.currentIndex -= this.scrollNum;\n                } else {\n                  this.currentIndex += this.scrollNum;\n                }\n                this.grabbing = false;\n                this.hammer.stop(true);\n                return;\n              }\n            }\n            break;\n          case 'pancancel':\n            this.grabbing = false;\n            this.drawView(this.currentIndex);\n            break;\n\n          case 'panend':\n            this.grabbing = false;\n\n            if (Math.abs(e.deltaX) > this.elmWidth * PANBOUNDARY) {\n              const moveNum = this.isDragMany ?\n                Math.ceil(Math.abs(e.deltaX) / this.elmWidth) : this.scrollNum;\n\n              let prevIndex = this.currentIndex - moveNum;\n              let nextIndex = this.currentIndex + moveNum;\n\n              // å¦æä¸æ¯ç¡éå¾ªç°ï¼ä¸è½å¤§æ¼æå°æ¼\n\n              if (e.deltaX > 0) {\n                if (!this.runLoop && prevIndex < 0) {\n                  prevIndex = 0;\n                  this.drawView(0);\n                }\n\n                this.currentIndex = prevIndex;\n              } else {\n                if (!this.runLoop && nextIndex > this.maxRightIndex) {\n                  nextIndex = this.maxRightIndex;\n                  this.drawView(nextIndex);\n                }\n                this.currentIndex = nextIndex;\n              }\n              break;\n            }\n            this.drawView(this.currentIndex);\n            break;\n        }\n      });\n\n      return hm;\n    });\n\n  }\n\n  private bindClick() {\n    if (this.btnNext && this.btnPrev) {\n      return forkJoin(\n        fromEvent(this.btnNext.nativeElement, 'click').pipe(\n          tap(() => this.currentIndex++)\n        ),\n        fromEvent(this.btnPrev.nativeElement, 'click').pipe(\n          tap(() => this.currentIndex--)\n        )\n      );\n    }\n    return of(null);\n  }\n\n  private callRestart() {\n    // if that is autoplay\n    // if that mouse is not on container( only mouse-enable is true, the state maybe true)\n    // if now is grabbing, skip this restart, using grabbing change restart\n    if (this.autoplay && !this.mouseOnContainer && !this.grabbing) {\n      this._zone.runOutsideAngular(() => {\n        this.restart.next(null);\n      });\n    }\n  }\n\n  private drawView(index: number, isAnimation = true, isFromAuto = this.isFromAuto) {\n\n    // move element only on length is more than 1\n    if (this.elms.length > 1) {\n      this.removeContainerTransition();\n      this.left = -((index * this.elmWidth) - this.alignDistance);\n\n      if (isAnimation) {\n        if (isFromAuto) {\n          this._renderer.addClass(this.containerElm, this.aniClassAuto);\n        } else {\n          this._renderer.addClass(this.containerElm, this.aniClass);\n        }\n        // if infinite move to next index with timeout\n        this.infiniteHandler(index);\n      }\n\n    } else {\n      this.left = this.alignDistance;\n    }\n  }\n\n  private removeContainerTransition() {\n    this._renderer.removeClass(this.containerElm, this.aniClass);\n    this._renderer.removeClass(this.containerElm, this.aniClassAuto);\n  }\n\n  private infiniteHandler(index: number) {\n    if (this.runLoop) {\n      let state = 0;\n      state = (index < 0) ? -1 : state;\n      state = (index > (this.itemElms.length - 1)) ? 1 : state;\n      if (state !== 0) {\n        switch (state) {\n          case -1:\n            this._currentIndex = (this.itemElms.length - 1);\n            break;\n          case 1:\n            this._currentIndex = 0;\n            break;\n        }\n\n        const isFromAuto = this.isFromAuto;\n        setTimeout(() => {\n          // when loop, cancel transition, and jump to boundary, when animation end\n          this.removeContainerTransition();\n          switch (state) {\n            case -1:\n              const distance = ((this.itemElms.length - 1) * this.elmWidth) - this.alignDistance;\n              this.left = -distance;\n              break;\n            case 1:\n              this.left = 0 + this.alignDistance;\n              break;\n          }\n\n          // if it is any loop carousel, the next event need wait the timeout complete\n          if (this.aniTime === this.speed) {\n            setTimeout(() => {\n              this.drawView(this.currentIndex, this.hasInitWriteValue, isFromAuto);\n            }, 50);\n          }\n\n        }, this.aniTime);\n      }\n    }\n  }\n\n  private outOfBound(type) {\n    switch (type) {\n      case 'panleft':\n        return this.currentIndex >= this.maxRightIndex;\n      case 'panright':\n        return this.currentIndex <= 0;\n    }\n  }\n\n  private runProgress(betweenTime): Observable<any> {\n\n    return this._zone.runOutsideAngular(() => {\n      const howTimes = this.speed / betweenTime;\n      const everyIncrease = 100 / this.speed * betweenTime;\n      return interval(betweenTime).pipe(\n        tap(t => {\n          this.progressWidth = (t % howTimes) * everyIncrease;\n        }),\n        bufferCount(Math.round(howTimes), 0)\n      );\n    });\n  }\n\n  private getAutoNum() {\n    const curr_width = this.rootElmWidth;\n    // check user has had set breakpoint\n    if (this.breakpoint.length > 0) {\n      // get the last bigget point\n      const now = this.breakpoint.find((b) => {\n        return b.width >= curr_width;\n      });\n      // if find value, it is current width\n      if (now) {\n        return now.number;\n      }\n      return this.breakpoint[this.breakpoint.length - 1].number;\n    }\n\n    // system init show number\n    const initNum = 3;\n    // 610\n    if (curr_width > 300) {\n      return Math.floor(initNum + (curr_width / 200));\n    }\n    return initNum;\n  }\n\n  private addStyle(elm: HTMLElement, style: { [key: string]: string | number }) {\n    if (style) {\n      Object.keys(style).forEach((key) => {\n        const value = style[key];\n        this._renderer.setStyle(elm, key, value);\n      });\n    }\n  }\n\n  private setStyle(elm: HTMLElement, style: string, value: number) {\n    if (isPlatformBrowser(this.platformId)) {\n      this._renderer.setStyle(elm, style, `${value}px`);\n    } else {\n      this._renderer.setStyle(elm, style, `${value}%`);\n    }\n  }\n\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxHmCarouselDynamicDirective } from './ngx-hm-carousel-dynamic.directive';\nimport { NgxHmCarouselComponent } from './ngx-hm-carousel.component';\nimport { NgxHmCarouselItemDirective } from './ngx-hm-carousel-item.directive';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  declarations: [\n    NgxHmCarouselComponent,\n    NgxHmCarouselDynamicDirective,\n    NgxHmCarouselItemDirective\n  ],\n  exports: [\n    NgxHmCarouselComponent,\n    NgxHmCarouselDynamicDirective,\n    NgxHmCarouselItemDirective\n  ]\n})\nexport class NgxHmCarouselModule { }\n"]}