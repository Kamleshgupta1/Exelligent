import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgxHmCarouselBreakPointUp } from './ngx-hm-carousel.model';
export declare class NgxHmCarouselComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {
    private platformId;
    private _renderer;
    private _zone;
    private _cd;
    parentChild: ElementRef;
    btnPrev: ElementRef;
    btnNext: ElementRef;
    progressContainerElm: ElementRef;
    itemElms: QueryList<ElementRef>;
    contentPrev: TemplateRef<any>;
    contentNext: TemplateRef<any>;
    dotElm: TemplateRef<any>;
    progressElm: TemplateRef<any>;
    aniTime: number;
    aniClass: string;
    aniClassAuto: string;
    align: 'left' | 'center' | 'right';
    notDrag: boolean;
    mourseEnable: boolean;
    delay: number;
    direction: 'left' | 'right';
    scrollNum: number;
    isDragMany: boolean;
    disableDrag: boolean;
    infinite: boolean;
    speed: number;
    showNum: number | 'auto';
    currentIndex: number;
    autoplay: boolean;
    progressWidth: number;
    breakpoint: NgxHmCarouselBreakPointUp[];
    grabbing: boolean;
    private left;
    private readonly maxRightIndex;
    private readonly runLoop;
    private readonly lengthOne;
    constructor(platformId: Object, _renderer: Renderer2, _zone: NgZone, _cd: ChangeDetectorRef);
    private isFromAuto;
    private isAutoNum;
    private mouseOnContainer;
    private alignDistance;
    private elmWidth;
    private rootElm;
    private containerElm;
    private elms;
    private firstElm_clone;
    private LatestElm_clone;
    private hammer;
    private restart;
    private stopEvent;
    private doNext;
    private doNextSub$;
    private speedChange;
    private destroy$;
    private _porgressWidth;
    private _currentIndex;
    private _showNum;
    private _autoplay;
    private _infinite;
    private _tmpInfinite;
    private _grabbing;
    private panCount;
    private _disableDrag;
    private hasInitWriteValue;
    private readonly rootElmWidth;
    private containerElmWidth;
    ngAfterViewInit(): void;
    private init;
    ngOnDestroy(): void;
    private destroy;
    private destoryHammer;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    private onChange;
    private onTouched;
    private addInfiniteElm;
    private removeInfiniteElm;
    private containerResize;
    private initVariable;
    private reSetVariable;
    private setViewWidth;
    private bindHammer;
    private bindClick;
    private callRestart;
    private drawView;
    private removeContainerTransition;
    private infiniteHandler;
    private outOfBound;
    private runProgress;
    private getAutoNum;
    private addStyle;
    private setStyle;
}
