{"remainingRequest":"C:\\Bitnami\\xampp\\htdocs\\Laravel\\Exelligent\\MyProject\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Bitnami\\xampp\\htdocs\\Laravel\\Exelligent\\MyProject\\node_modules\\ngx-spinner\\fesm5\\ngx-spinner.js","dependencies":[{"path":"C:\\Bitnami\\xampp\\htdocs\\Laravel\\Exelligent\\MyProject\\node_modules\\ngx-spinner\\fesm5\\ngx-spinner.js","mtime":499162500000},{"path":"C:\\Bitnami\\xampp\\htdocs\\Laravel\\Exelligent\\MyProject\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Bitnami\\xampp\\htdocs\\Laravel\\Exelligent\\MyProject\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Subject } from 'rxjs';\nimport { Injectable, NgModule, Component, Input, defineInjectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxSpinnerService = /*@__PURE__*/ (function () {\n    /**\n     * Creates an instance of NgxSpinnerService.\n     * @memberof NgxSpinnerService\n     */\n    function NgxSpinnerService() {\n        /**\n         * Spinner observable\n         *\n         * \\@memberof NgxSpinnerService\n         */\n        this.spinnerObservable = new Subject();\n    }\n    /**\n     * To show spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    /**\n     * To show spinner\n     *\n     * \\@memberof NgxSpinnerService\n     * @return {?}\n     */\n    NgxSpinnerService.prototype.show = /**\n     * To show spinner\n     *\n     * \\@memberof NgxSpinnerService\n     * @return {?}\n     */\n        function () {\n            this.spinnerObservable.next(true);\n        };\n    /**\n     * To hide spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    /**\n     * To hide spinner\n     *\n     * \\@memberof NgxSpinnerService\n     * @return {?}\n     */\n    NgxSpinnerService.prototype.hide = /**\n     * To hide spinner\n     *\n     * \\@memberof NgxSpinnerService\n     * @return {?}\n     */\n        function () {\n            this.spinnerObservable.next(false);\n        };\n    /** @nocollapse */ NgxSpinnerService.ngInjectableDef = defineInjectable({ factory: function NgxSpinnerService_Factory() { return new NgxSpinnerService(); }, token: NgxSpinnerService, providedIn: \"root\" });\n    return NgxSpinnerService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar LOADERS = {\n    'ball-8bits': 16,\n    'ball-atom': 4,\n    'ball-beat': 3,\n    'ball-circus': 5,\n    'ball-climbing-dot': 4,\n    'ball-clip-rotate': 1,\n    'ball-clip-rotate-multiple': 2,\n    'ball-clip-rotate-pulse': 2,\n    'ball-elastic-dots': 5,\n    'ball-fall': 3,\n    'ball-fussion': 4,\n    'ball-grid-beat': 9,\n    'ball-grid-pulse': 9,\n    'ball-newton-cradle': 4,\n    'ball-pulse': 3,\n    'ball-pulse-rise': 5,\n    'ball-pulse-sync': 3,\n    'ball-rotate': 1,\n    'ball-running-dots': 5,\n    'ball-scale': 1,\n    'ball-scale-multiple': 3,\n    'ball-scale-pulse': 2,\n    'ball-scale-ripple': 1,\n    'ball-scale-ripple-multiple': 3,\n    'ball-spin': 8,\n    'ball-spin-clockwise': 8,\n    'ball-spin-clockwise-fade': 8,\n    'ball-spin-clockwise-fade-rotating': 8,\n    'ball-spin-fade': 8,\n    'ball-spin-fade-rotating': 8,\n    'ball-spin-rotate': 2,\n    'ball-square-clockwise-spin': 8,\n    'ball-square-spin': 8,\n    'ball-triangle-path': 3,\n    'ball-zig-zag': 2,\n    'ball-zig-zag-deflect': 2,\n    'cog': 1,\n    'cube-transition': 2,\n    'fire': 3,\n    'line-scale': 5,\n    'line-scale-party': 5,\n    'line-scale-pulse-out': 5,\n    'line-scale-pulse-out-rapid': 5,\n    'line-spin-clockwise-fade': 8,\n    'line-spin-clockwise-fade-rotating': 8,\n    'line-spin-fade': 8,\n    'line-spin-fade-rotating': 8,\n    'pacman': 6,\n    'square-jelly-box': 2,\n    'square-loader': 1,\n    'square-spin': 1,\n    'timer': 1,\n    'triangle-skew-spin': 1\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxSpinnerComponent = /*@__PURE__*/ (function () {\n    /**\n     * Creates an instance of NgxSpinnerComponent.\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    function NgxSpinnerComponent(spinnerService) {\n        var _this = this;\n        this.spinnerService = spinnerService;\n        /**\n         * To set backdrop color('rgba(51,51,51,0.8)')\n         * Only supports RGBA color format\n         * \\@memberof NgxSpinnerComponent\n         */\n        this.bdColor = 'rgba(51,51,51,0.8)';\n        /**\n         * To set spinner size\n         *\n         * \\@memberof NgxSpinnerComponent\n         */\n        this.size = '';\n        /**\n         * To set spinner color('#fff')\n         *\n         * \\@memberof NgxSpinnerComponent\n         */\n        this.color = '#fff';\n        /**\n         * To enable/disable fullscreen mode\n         *\n         * \\@memberof NgxSpinnerComponent\n         */\n        this.fullScreen = true;\n        /**\n         * Flag to show/hide spinner\n         *\n         * \\@memberof NgxSpinnerComponent\n         */\n        this.showSpinner = false;\n        /**\n         * Array for spinner divs\n         *\n         * \\@memberof NgxSpinnerComponent\n         */\n        this.divArray = [];\n        /**\n         * Counter for div\n         *\n         * \\@memberof NgxSpinnerComponent\n         */\n        this.divCount = 0;\n        this.spinnerSubscription = this.spinnerService.spinnerObservable.subscribe(function (flag) {\n            _this.showSpinner = flag;\n        });\n    }\n    /**\n     * Initialization method\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    /**\n     * Initialization method\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @return {?}\n     */\n    NgxSpinnerComponent.prototype.ngOnInit = /**\n     * Initialization method\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @return {?}\n     */\n        function () {\n            this.onInputChange();\n        };\n    /**\n     * On changes event for input variables\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    /**\n     * On changes event for input variables\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @param {?} changes\n     * @return {?}\n     */\n    NgxSpinnerComponent.prototype.ngOnChanges = /**\n     * On changes event for input variables\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            /** @type {?} */\n            var typeChange = changes.type;\n            /** @type {?} */\n            var sizeChange = changes.size;\n            if (typeChange) {\n                if (typeof typeChange.currentValue !== 'undefined' && typeChange.currentValue !== typeChange.previousValue) {\n                    if (typeChange.currentValue !== '') {\n                        this.type = typeChange.currentValue;\n                        this.onInputChange();\n                    }\n                }\n            }\n            if (sizeChange) {\n                if (typeof sizeChange.currentValue !== 'undefined' && sizeChange.currentValue !== sizeChange.previousValue) {\n                    if (sizeChange.currentValue !== '') {\n                        this.size = sizeChange.currentValue;\n                        this.onInputChange();\n                    }\n                }\n            }\n        };\n    /**\n     * To get class for spinner\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    /**\n     * To get class for spinner\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @param {?=} type\n     * @param {?=} size\n     * @return {?}\n     */\n    NgxSpinnerComponent.prototype.getClass = /**\n     * To get class for spinner\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @param {?=} type\n     * @param {?=} size\n     * @return {?}\n     */\n        function (type, size) {\n            if (type === void 0) {\n                type = 'ball-scale-multiple';\n            }\n            if (size === void 0) {\n                size = 'large';\n            }\n            this.divCount = LOADERS[type];\n            this.divArray = Array(this.divCount).fill(0).map(function (x, i) { return i; });\n            /** @type {?} */\n            var sizeClass = '';\n            switch (size.toLowerCase()) {\n                case 'small':\n                    sizeClass = 'la-sm';\n                    break;\n                case 'medium':\n                    sizeClass = 'la-2x';\n                    break;\n                case 'large':\n                    sizeClass = 'la-3x';\n                    break;\n                default:\n                    break;\n            }\n            return 'la-' + type + ' ' + sizeClass;\n        };\n    /**\n     * After input variables chnage event\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    /**\n     * After input variables chnage event\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @return {?}\n     */\n    NgxSpinnerComponent.prototype.onInputChange = /**\n     * After input variables chnage event\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @return {?}\n     */\n        function () {\n            this.spinnerClass = this.getClass(this.type, this.size);\n        };\n    /**\n     * Component destroy event\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    /**\n     * Component destroy event\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @return {?}\n     */\n    NgxSpinnerComponent.prototype.ngOnDestroy = /**\n     * Component destroy event\n     *\n     * \\@memberof NgxSpinnerComponent\n     * @return {?}\n     */\n        function () {\n            this.spinnerSubscription.unsubscribe();\n        };\n    return NgxSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxSpinnerModule = /*@__PURE__*/ (function () {\n    function NgxSpinnerModule() {\n    }\n    return NgxSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { NgxSpinnerService, NgxSpinnerComponent, NgxSpinnerModule };\n//# sourceMappingURL=ngx-spinner.js.map \n",null]}